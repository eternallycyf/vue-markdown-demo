import{o as n,c as s,g as a}from"./app.12c58a71.js";const t={components:{}},p='{"title":"手写 pinia","description":"","frontmatter":{"map":{"path":"/pinia","realPath":"src/pinia/index.en-US.md"}},"relativePath":"pinia/index.md","lastUpdated":1662297313564}',o=a('<h1 id="手写-pinia"><a class="header-anchor" href="#手写-pinia" aria-hidden="true">#</a> 手写 pinia</h1><div class="language-ts | pure"><pre><code><span class="token comment">// apis.ts</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    store<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-ts | pure"><pre><code><span class="token comment">// createActions.ts</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createActions</span><span class="token punctuation">(</span>store<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> actions<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> method <span class="token keyword">in</span> actions<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    store<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> actions<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-ts | pure"><pre><code><span class="token comment">// createPinia.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> patch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./apis&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> piniaStore <span class="token operator">=</span> <span class="token generic-function"><span class="token function">reactive</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">function</span> <span class="token function">setSubStore</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> store<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>piniaStore<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      piniaStore<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> store<span class="token punctuation">;</span>\n      piniaStore<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span>$patch <span class="token operator">=</span> patch<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> piniaStore<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">function</span> <span class="token function">install</span><span class="token punctuation">(</span>app<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">&#39;setSubStore&#39;</span><span class="token punctuation">,</span> setSubStore<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    install<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><div class="language-ts | pure"><pre><code><span class="token comment">// defineStore.ts.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> inject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createState<span class="token punctuation">,</span> createActions<span class="token punctuation">,</span> createGetters <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./options&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> state<span class="token punctuation">,</span> getters<span class="token punctuation">,</span> actions <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> store<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  state <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> state <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token function">createState</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  actions <span class="token operator">&amp;&amp;</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>actions<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">createActions</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> actions<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  getters <span class="token operator">&amp;&amp;</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>getters<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">createGetters</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> getters<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> setSubStore<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">&#39;setSubStore&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> piniaStore <span class="token operator">=</span> <span class="token function">setSubStore</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token function">reactive</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> piniaStore<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><div class="language-ts | pure"><pre><code><span class="token comment">// options/index.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./state&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createActions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./actions&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createGetters <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./getters&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span> createState<span class="token punctuation">,</span> createActions<span class="token punctuation">,</span> createGetters <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><div class="language-ts | pure"><pre><code><span class="token comment">// options/actions.ts</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createActions</span><span class="token punctuation">(</span>store<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> actions<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> method <span class="token keyword">in</span> actions<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    store<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> actions<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-ts | pure"><pre><code><span class="token comment">// options/getters.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> computed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createGetters</span><span class="token punctuation">(</span>store<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> getters<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> getter <span class="token keyword">in</span> getters<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    store<span class="token punctuation">[</span>getter<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span>getters<span class="token punctuation">[</span>getter<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>$state<span class="token punctuation">,</span> store<span class="token punctuation">.</span>$state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    store<span class="token punctuation">.</span>$state<span class="token punctuation">[</span>getter<span class="token punctuation">]</span> <span class="token operator">=</span> store<span class="token punctuation">[</span>getter<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-ts | pure"><pre><code><span class="token comment">// options/state.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> toRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createState</span><span class="token punctuation">(</span>store<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> state<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> _state<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  store<span class="token punctuation">.</span>$state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>_state<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> _state<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    store<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">toRef</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>$state<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',9);t.render=function(a,t,p,e,c,u){return n(),s("div",null,[o])};export default t;export{p as __pageData};
